worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'tenant="$tenant_slug" domain="$custom_domain"';
                    
    access_log /var/log/nginx/access.log main;
    
    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50m;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    
    # Upstream servers
    upstream backend {
        server backend:8000;
        keepalive 32;
    }
    
    upstream licensing_server {
        server licensing-server:8001;
        keepalive 16;
    }
    
    upstream frontend {
        server frontend:80;
        keepalive 16;
    }
    
    # Map to determine tenant from host
    map $host $tenant_slug {
        ~^([a-z0-9-]+)\.bcal\.com$ $1;
        ~^([a-z0-9-]+)\.localhost$ $1;
        default "";
    }
    
    # Map to detect custom domains
    map $host $custom_domain {
        ~^[a-z0-9-]+\.bcal\.com$ "";
        ~^[a-z0-9-]+\.localhost$ "";
        localhost "";
        127.0.0.1 "";
        default $host;
    }
    
    # SSL Configuration (uncomment for HTTPS)
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
    
    # Main server block
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Tenant headers for backend
        location ~* ^/api/ {
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            
            # Add tenant information headers
            proxy_set_header X-Tenant-Slug $tenant_slug;
            proxy_set_header X-Custom-Domain $custom_domain;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Backend proxy
            proxy_pass http://backend;
            proxy_redirect off;
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Authentication endpoints with stricter rate limiting
        location ~* ^/api/(auth|organizations/signup) {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_set_header X-Tenant-Slug $tenant_slug;
            proxy_set_header X-Custom-Domain $custom_domain;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_pass http://backend;
            proxy_redirect off;
        }
        
        # Licensing server (internal only, restrict access)
        location /licensing/ {
            # Only allow internal access
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            
            rewrite ^/licensing/(.*)$ /$1 break;
            proxy_pass http://licensing_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # File uploads
        location /uploads/ {
            alias /var/www/uploads/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Security for uploaded files
            location ~* \.(php|pl|py|jsp|asp|sh|cgi)$ {
                deny all;
            }
        }
        
        # Static files from frontend
        location /static/ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Frontend application
        location / {
            # Add tenant information for frontend
            proxy_set_header X-Tenant-Slug $tenant_slug;
            proxy_set_header X-Custom-Domain $custom_domain;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_pass http://frontend;
            proxy_redirect off;
            
            # Handle SPA routing
            try_files $uri $uri/ @fallback;
        }
        
        # Fallback for SPA routing
        location @fallback {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Deny access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ \.(sql|conf|env)$ {
            deny all;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /var/www/html;
            internal;
        }
        
        location = /50x.html {
            root /var/www/html;
            internal;
        }
    }
    
    # HTTPS server block (uncomment for SSL)
    # server {
    #     listen 443 ssl http2;
    #     server_name _;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     # Same configuration as HTTP server above
    #     # ... (copy all location blocks from above)
    # }
    
    # Redirect HTTP to HTTPS (uncomment for SSL)
    # server {
    #     listen 80;
    #     server_name _;
    #     return 301 https://$host$request_uri;
    # }
}
